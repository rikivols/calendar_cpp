Name of the application: Calendar


Original description from progtest:

Aplikace: Kalendář

Vaším cílem je implementovat aplikaci pro správu kalendářů a událostí v nich.

Implementujte následující funcionality:
    1. Kalendář musí zobrazovat alespoň denní, týdenní a měsíční přehled událostí.
    2. U událostí chceme evidovat alespoň následující informace: název události, datum a čas, trvání, místo, účastníky,
       tagy a textovou poznámku. V rámci své implementace můžete přidat další zajímavé atributy
       (př. účast: povinná, přesunutelná, volitelná, …).
    3. Události mohou být jednorázové nebo opakující se. Umožněte definovat frekvenci opakování alespoň na úrovni dní.
    4. Kalendář musí umožnit vyhledávat události podle jednotlivých atributů a to včetně kombinací obsahující
       spojky "a zároveň" a "nebo" (př. události před 23.1.2022 a zároveń v Praze, …).
    5. Umožněte exportování a importování událostí. Exportovat lze i výběr definovaný vyhledáváním.
    6. Kalendář nesmí umožnit kolizi, v případě kolize musí umožnit najít nejbližší volný termín nebo přesunout
       událost (je-li to možné). Alternativně můžete povolit max. počet kolizí (př. 24 kolizí pro učebnu, podle počtu
       studentů, které v ní mohou být, …), nelze však kolize ignorovat.

Kde lze využít polymorfismus? (doporučené)
- zobrazení kalendáře: denní, týdenní, měsíční, …
- strategie řešení kolizí: nalezení nejbližšího možného termínu, přesun max. X jiných událostí na volné sloty, …
- formáty exportovaných událostí: proprietární, iCalendar, CSV, …
- uživatelské rozhraní: konzole, ncurses, SDL, OpenGL (různé varianty), …
- druhy událostí (předem si rozmyslete, zda ve vašem případě se jedná o polymorfismus)


My implementation of the app:

We have an application calendar, which stores events. Every event has: event id (autogenerated), datetime of start,
datetime of end (not for recurring events), place of the event, attendees, tags, notes.
We have 2 types of events:
1. Simple event - happens only one time, doesn't repeat
2. Recurring event - has start, happens every day from the start datetime, doesn't have end

Calendar also allows:
- Import/Export from its own CSV-like format
- Add event
- Move event by X amount of hours
- Remove event
- Find event by: date before/after, place, attendees, tags. Allows to search by combinations of multiple attributes,
  thanks to the logical operator AND / OR. We can have all the attributes at the same time, but the logical operator
  has to be only of one type. We allow to export the results.
- Display events, modes: daily, weekly, monthly. We can also list through the pages of the display mode. (previous page,
  next page)
- Solve conflicts when adding a new event if they arise


Example:

```
--------------------------------
| Welcome to the calendar app! |
--------------------------------

Do you want to import from a file or start with an empty calendar?
1 - import from file
2 - start with an empty calendar
Pick an option (1-2): $ 1

Select path to the file you want to import from: $ examples/example1.txt

Calendar was successfully imported. Number of events: 5

You're at the main menu of the calendar, what action do you want to choose?
1 - add event
2 - move event
3 - remove event
4 - find events
5 - display calendar
6 - export calendar
7 - get event by id
8 - end application

Select option:
$ 1

Select calendar display mode:
1 - daily
2 - weekly
3 - monthly
4 - cancel
$ 2

Your calendar for week 1 of 2022
01.01.2022 - no events
02.01.2022 - no events
03.01.2022 - 1 event
---------------------
* One time event
id: 1
Start: 13:00
End: 13:30
Place: New York
Attendees: Vagner, Gates, Biden
Tags:
* important
Note: Don't forget to learn pointers
---------------------
04.01.2022 - no events
05.01.2022 - no events
06.01.2022 - no events
07.01.2022 - no events

Calendar view options:
1 - go to previous page
2 - go to the next page
3 - cancel

$ 3

Welcome to the action explorer of calendar,
Available actions:
1 - add event
2 - move event
3 - remove event
4 - find events
5 - display calendar
6 - export calendar
7 - get event by id
8 - end application

Select option:
$ 8

goodbye
```


Polymorphism:

My first polymorphism is the abstract class `Event`, We can have a `SimpleEvent` or a `RecurringEvent`,
Recurring event doesn't have an end and happens every day.

Event defines a method: `bool isConflict(const Event &event, int offsetHours)`.
This method finds out whether calendar's event doesn't conflict with the new event (that we want to add).

The calculation of the conflict is different for simple and recurring events. (since recurring happens every day).
There are also more methods using polymorphism, they relate to the different way that we calculate event's duration
and so on, also we display them differently


Second polymorphism is for the display of the calendar (base class DisplayCalendar). We have different modes
of the display: `DisplayDaily`, `DisplayWeekly`, `DisplayMonthly`

We have a polymorphic method: `void display()`. Every display mode will display different number of days and day
ranges.

We also allow user to list through the calendar's pages. That's why every one of these 3 classes also store the
current page that the user is on (for DisplayWeekly we store current year and current week...).

Next 2 polymorphic methods are: `void nextPage()`, `void previousPage()`
nextPage - stores the next page of the calendar and displays it - different next page for every mode
previousPage - stores the previous page of the calendar and displays it - different previous page for every mode
The Display will be called from the Application class.
(I've implemented it in the displayCalendar function.)
